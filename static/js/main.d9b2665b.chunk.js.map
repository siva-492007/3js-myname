{"version":3,"sources":["Components/3dText.js","App.js","reportWebVitals.js","index.js"],"names":["Text3D","scene","THREE","size","width","window","innerWidth","height","innerHeight","addEventListener","camera","aspect","updateProjectionMatrix","renderer","setSize","setPixelRatio","Math","min","devicePixelRatio","cursor","x","y","event","clientX","clientY","matcapTexture","load","font","material","matcap","textGeometry","curveSegments","bevelEnabled","bevelThickness","bevelSize","bevelOffset","bevelSegment","center","text","add","donutGeometry","i","donut","position","random","z","rotation","PI","scale","set","canvas","document","querySelector","controls","OrbitControls","enableDamping","tick","update","render","requestAnimationFrame","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"6NA+GeA,EA3GA,WAEX,IAAMC,EAAQ,IAAIC,IAEZC,EAAO,CACTC,MAAOC,OAAOC,WACdC,OAAQF,OAAOG,aAGnBH,OAAOI,iBAAiB,UAAU,WAE9BN,EAAKC,MAAQC,OAAOC,WACpBH,EAAKI,OAASF,OAAOG,YAErBE,EAAOC,OAASR,EAAKC,MAAQD,EAAKI,OAClCG,EAAOE,yBAEPC,EAASC,QAAQX,EAAKC,MAAOD,EAAKI,QAClCM,EAASE,cAAcC,KAAKC,IAAIZ,OAAOa,iBAAkB,OAG7D,IAAMC,EAAS,CACXC,EAAG,EACHC,EAAG,GAGPhB,OAAOI,iBAAiB,aAAa,SAACa,GAClCH,EAAOC,EAAIE,EAAMC,QAAUpB,EAAKC,MAAQ,GACxCe,EAAOE,EAAIC,EAAME,QAAUrB,EAAKI,OAAS,MAG7C,IACMkB,GADgB,IAAIvB,KACUwB,KAAK,4BAEtB,IAAIxB,KAEZwB,KACP,2CACA,SAACC,GAEG,IAAMC,EAAW,IAAI1B,IAAyB,CAAC2B,OAAQJ,IAEjDK,EAAe,IAAI5B,IAAyB,cAAe,CAC7DyB,KAAMA,EACNxB,KAAM,GACNI,OAAQ,GACRwB,cAAe,EACfC,cAAc,EACdC,eAAgB,IAChBC,UAAW,IACXC,YAAa,EACbC,aAAc,IAGlBN,EAAaO,SAEb,IAAMC,EAAO,IAAIpC,IAAW4B,EAAcF,GAC1C3B,EAAMsC,IAAID,GAIV,IAFA,IAAME,EAAgB,IAAItC,IAA0B,GAAK,GAAK,GAAI,IAEzDuC,EAAI,EAAGA,EAAI,IAAKA,IAAK,CAC1B,IAAMC,EAAQ,IAAIxC,IAAWsC,EAAeZ,GAC5Cc,EAAMC,SAASvB,EAA4B,IAAvBJ,KAAK4B,SAAW,IACpCF,EAAMC,SAAStB,EAA4B,IAAvBL,KAAK4B,SAAW,IACpCF,EAAMC,SAASE,EAA4B,IAAvB7B,KAAK4B,SAAW,IAEpCF,EAAMI,SAAS1B,EAAIJ,KAAK4B,SAAW5B,KAAK+B,GACxCL,EAAMI,SAASzB,EAAIL,KAAK4B,SAAW5B,KAAK+B,GAExC,IAAMC,EAAQhC,KAAK4B,SACnBF,EAAMM,MAAMC,IAAID,EAAOA,EAAOA,GAE9B/C,EAAMsC,IAAIG,OAKtB,IAAMhC,EAAS,IAAIR,IAAwB,GAAIC,EAAKC,MAAQD,EAAKI,OAAQ,GAAK,KAC9EG,EAAOiC,SAASE,EAAI,EACpB5C,EAAMsC,IAAI7B,GAEV,IAAMwC,EAASC,SAASC,cAAc,gBAEhCC,EAAW,IAAIC,IAAc5C,EAAQwC,GAC3CG,EAASE,eAAgB,EAEzB,IAAM1C,EAAW,IAAIX,IAAoB,CACrCgD,OAAQA,IAGZrC,EAASC,QAAQX,EAAKC,MAAOD,EAAKI,QAUlC,OARa,SAAPiD,IACFH,EAASI,SACT5C,EAAS6C,OAAOzD,EAAOS,GACvBL,OAAOsD,sBAAsBH,GAGjCA,GAGI,8BC7FOI,EARH,WACR,OACI,8BACI,cAAC,EAAD,OCIGC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASZ,OACP,cAAC,IAAMa,WAAP,UACE,cAAC,EAAD,MAEFpB,SAASqB,eAAe,SAM1BX,M","file":"static/js/main.d9b2665b.chunk.js","sourcesContent":["import React from 'react';\r\nimport * as THREE from 'three';\r\nimport {OrbitControls} from \"three/examples/jsm/controls/OrbitControls\";\r\n\r\nconst Text3D = () => {\r\n\r\n    const scene = new THREE.Scene();\r\n\r\n    const size = {\r\n        width: window.innerWidth,\r\n        height: window.innerHeight\r\n    };\r\n\r\n    window.addEventListener('resize', () => {\r\n\r\n        size.width = window.innerWidth;\r\n        size.height = window.innerHeight;\r\n\r\n        camera.aspect = size.width / size.height;\r\n        camera.updateProjectionMatrix();\r\n\r\n        renderer.setSize(size.width, size.height);\r\n        renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\r\n    });\r\n\r\n    const cursor = {\r\n        x: 0,\r\n        y: 0\r\n    };\r\n\r\n    window.addEventListener('mousemove', (event) => {\r\n        cursor.x = event.clientX / size.width - 0.5;\r\n        cursor.y = event.clientY / size.height - 0.5;\r\n    });\r\n\r\n    const textureLoader = new THREE.TextureLoader();\r\n    const matcapTexture = textureLoader.load('/textures/matcaps/8.png');\r\n\r\n    const fontLoader = new THREE.FontLoader();\r\n\r\n    fontLoader.load(\r\n        '/fonts/helvetiker_regular.typeface.json',\r\n        (font) => {\r\n\r\n            const material = new THREE.MeshMatcapMaterial({matcap: matcapTexture});\r\n\r\n            const textGeometry = new THREE.TextBufferGeometry('# $!v@007 #', {\r\n                font: font,\r\n                size: 0.5,\r\n                height: 0.2,\r\n                curveSegments: 5,\r\n                bevelEnabled: true,\r\n                bevelThickness: 0.03,\r\n                bevelSize: 0.02,\r\n                bevelOffset: 0,\r\n                bevelSegment: 5\r\n            });\r\n\r\n            textGeometry.center();\r\n\r\n            const text = new THREE.Mesh(textGeometry, material);\r\n            scene.add(text);\r\n\r\n            const donutGeometry = new THREE.TorusBufferGeometry(0.3, 0.2, 20, 45);\r\n\r\n            for (let i = 0; i < 300; i++) {\r\n                const donut = new THREE.Mesh(donutGeometry, material);\r\n                donut.position.x = (Math.random() - 0.5) * 10;\r\n                donut.position.y = (Math.random() - 0.5) * 10;\r\n                donut.position.z = (Math.random() - 0.5) * 10;\r\n\r\n                donut.rotation.x = Math.random() * Math.PI;\r\n                donut.rotation.y = Math.random() * Math.PI;\r\n\r\n                const scale = Math.random();\r\n                donut.scale.set(scale, scale, scale);\r\n\r\n                scene.add(donut);\r\n            }\r\n        });\r\n\r\n\r\n    const camera = new THREE.PerspectiveCamera(70, size.width / size.height, 0.1, 100)\r\n    camera.position.z = 3;\r\n    scene.add(camera);\r\n\r\n    const canvas = document.querySelector('canvas.webgl');\r\n\r\n    const controls = new OrbitControls(camera, canvas);\r\n    controls.enableDamping = true;\r\n\r\n    const renderer = new THREE.WebGLRenderer({\r\n        canvas: canvas\r\n    });\r\n\r\n    renderer.setSize(size.width, size.height);\r\n\r\n    const tick = () => {\r\n        controls.update();\r\n        renderer.render(scene, camera);\r\n        window.requestAnimationFrame(tick);\r\n    };\r\n\r\n    tick();\r\n\r\n    return (\r\n        <>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Text3D;","import React from 'react';\nimport './App.css';\n\nimport Text3D from \"./Components/3dText\";\n\nconst App = () => {\n    return (\n        <div>\n            <Text3D/>\n        </div>\n    )\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}